1.Union of two arrays
----------------------
1. Start
2. Collect given 2 arrays, define new arr[]
3. Merge the given 2 arrays push 1 into another
4. Sort : Traversing the list by comparing items i < i+1, if else swap the items to make the list in order
5. Start traversing and compare the values in the list as i == i+1 
6. if return true, then push value to new arr[]
7. run step 4 to 6 till end
8. Print new arr[]
9. exit


2.Minimize number of students to be removed
-------------------------------------------
1. Start
2. Start traversing from 1st index and compare the values in the list as i-1 <= i & i <= i+1
3. if i-1 <= i return false, then push i-1 to new array
4. if i <= i+1 return false, then push i+1 to new array
4. Run the step 2 until reaches the end-1.
5. Print new Array count
6. Exit


3. Missing number in array
----------------------------
1. start
2. Start traversing the Array in N times
3. initialize the counter = 1
3. compare the counter and the number, and increase the counter value by 1 on every loop
4. if it is not matched return counter
5. exit


4.Minimum product subset of an array
-------------------------------------
1. Start
2. Sort : Traversing the list by comparing items i < i+1, if else swap the items to make the list in order
3. Start traversing again in sorted list from index 1, set var a = list[0], value
4. Multiply each item by 'a' until reaches end, then store it in value. 
5. return value
6. exit


5.Minimum sum by  choosing minimum of pairs from array 
-------------------------------------------------------
1. Start
2. Start traversing the list and loop the list by 2 itmes, 
3. create new Array
4. compare i < i+1, if true push i to new Array
5. Run the loop until end.
6. Start traversing the new Array from index 1, set var a = new Array[0], vlaue
7. Add the items on every loop till reached the end, and store into value 
8. return value
9. exit

6.Find the element that appears once in sorted array
-----------------------------------------------------
1. start
2. initialize counter as 0, and val
3. start traversing arr[] upto N times
4. Set arr[0] as input
5. check the arr[] with arr[i] except i index,
6. if arr[i] present in the arr[] increase the counter value++
7. if counter value > 1, push arr[i] to val
8. Run step 5 to 8 till last
9. return val
10. exit

7. Sum of middle elements of two sorted array
----------------------------------------------
1. start
2. collect Ar1[], Ar2[], N, val
3. push Ar2[] to Ar1[]
4. Sort : Traversing the Ar1[] by comparing items i < i+1, if else swap the items to make the Ar1[] in order
5. Traverse the Ar1[] till index reaches N-1, 
6. now add Ar1[n-1] + Ar1[n], then set value to val
7. return val
8. exit